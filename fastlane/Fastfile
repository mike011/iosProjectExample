# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`
require 'fileutils'

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
min_fastlane_version("2.70.1")

default_platform(:ios)

platform :ios do
  before_all do
    test_output_dir = 'test_output'
    FileUtils.rm_rf(test_output_dir)
    Dir.mkdir(test_output_dir)
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # cocoapods
    # cocoapods
  end

  desc "Runs all the tests"
  lane :test do |options|
    scan(code_coverage: true, output_directory: "fastlane/test_output/")
    create_report_for_ci("UnitTests", "report.junit")

    if options.has_key?(:CODACY_PROJECT_TOKEN)
      slather(
        scheme: "MonkeyPinch",
        proj: "MonkeyPinch.xcodeproj",
        output_directory: "fastlane/test_output/",
        cobertura_xml: true
      )
      code_coverage_command = [
        "java -cp codacy-coverage-reporter-2.0.2-assembly.jar",
        "com.codacy.CodacyCoverageReporter",
        "--language Swift", "--forceLanguage",
        "--coverageReport ./test_output/cobertura.xml",
        "--commitUUID " + last_git_commit[:commit_hash],
        "--projectToken " + options[:CODACY_PROJECT_TOKEN]
      ]
      sh code_coverage_command.join(" ")
    else
      slather(
        scheme: "MonkeyPinch",
        proj: "MonkeyPinch.xcodeproj",
        output_directory: "fastlane/test_output/",
        cobertura_xml: true
      )
    end
  end

  desc "Lint all the things."
  lane :lint do
    swiftLint(
      mode: :lint,
      reporter: "junit",
      ignore_exit_status: true,
      output_file: "fastlane/test_output" + "/swiftlint." + "junit"
    )
    create_report_for_ci("swiftlint", "swiftlint.junit")
  end

  def create_report_for_ci(name, filename)

    # Only run this report on the CI.
    return if !is_ci

    # Creating the sub-directory for the test run within the BITRISE_TEST_RESULT_DIR:
    test_run_dir = ENV["BITRISE_TEST_RESULT_DIR"] + "/" + name
    Dir.mkdir(test_run_dir) unless Dir.exists?(test_run_dir)

    # Exporting the JUnit XML test report:
    FileUtils.cp('test_output/' + filename, test_run_dir + '/UnitTest.xml')

    # Creating the test-info.json file with the name of the test run defined:
    json = File.open(test_run_dir + '/test-info.json','w')
    json.write('{"test-name":"' + name + '"}');
    json.close
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # sync_code_signing(type: "appstore") # more information: https://codesigning.guide
    build_app # more options available
    upload_to_testflight

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # sync_code_signing(type: "appstore")
    capture_screenshots
    build_app # more options available
    upload_to_app_store(force: true)
    # frame_screenshots
  end

  desc "Merge the daily build"
  lane :daily_testflight_build_merge do

    branch_name = get_app_version
    # Step 1: From your project repository, bring in the changes and test.
    sh "git merge develop"

    # Step 2: Merge the changes and update on GitHub.
    sh "git checkout develop"
    sh "git merge --no-ff release/" + branch_name
    sh "git push origin develop --force"
  end

  def get_app_version
    return get_info_plist_value(path: './MonkeyPinch/Info.plist', key: 'CFBundleVersion')
  end


  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://docs.fastlane.tools/#metrics
